// DHT sensor library - Version: Latest 
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/f3017fb7-cd13-4160-bb48-3eade3b59b50 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  CloudLength sensor;
  int temp;
  int humid;
  CloudLight light;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define echoPin 10 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 9 //attach pin D3 Arduino to pin Trig of HC-SR04
#include <EduIntro.h>
//tempertaure / humidity sensor  
DHT11 dht11(D7);  // creating the object sensor on pin 'D7'

int count = 0;
int C;   // temperature C readings are integers
float F; // temperature F readings are returned in float format
int H;   // humidity readings are integers
char incoming[10];
// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement
String words;//variable for message logging

void setup() {
  Serial.begin(9600); // // Serial Communication is starting with 9600 of baudrate speed
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  // Defined in thingProperties.h
  initProperties();
  pinMode(11, OUTPUT);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

}


void loop() {
  ArduinoCloud.update();
  getdistance();
  temperature(); 
}
void temperature(){//get readings from dht11
  dht11.update();

  C = dht11.readCelsius();       // Reading the temperature in Celsius degrees and store in the C variable
  F = dht11.readFahrenheit();   // Reading the temperature in Fahrenheit degrees and store in the F variable
  H = dht11.readHumidity();     // Reading the humidity index

  // Print the collected data in a row on the Serial Monitor
  //Serial.print("H: ");
  //Serial.print(H);
  //Serial.print("\tC: ");
  //Serial.print(C);
  //Serial.print("\tF: ");
  //Serial.println(F);
  temp = C;//set widget varaibles
  humid = H;
  delay(100);
}

/*
  Since Sensor is READ_WRITE variable, onSensorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void getdistance(){//get ultrasonic sensor readings
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);//get readings
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = (duration*.0343)/2;
  //Serial.print("Distance: ");
  //Serial.println(distance);
  delay(100);
  sensor = distance;//set widget variable
  //message = distance;
}

/*
  Since Light is READ_WRITE variable, onLightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightChange()  {//turn on lights 
  // Add your code here to act upon Light change
  if(light){
    words = "lights on";//log that light has been turned on 
    message = words;
    digitalWrite(11,HIGH);
  }
  else{
    words = "lights off";//log that light has been turned off
    message = words;
    digitalWrite(11,LOW);
  }
}


void onSensorChange()  {
  // Add your code here to act upon Sensor change
   words = "Ultrasonic sensor distance is ";//logs temperature changes 
   words += sensor;
   message = words;
}

/*
  Since Message is READ_WRITE variable, onMessageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageChange()  {
  // Add your code here to act upon Message change
}


/*
  Since Temp is READ_WRITE variable, onTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempChange()  {
  // Add your code here to act upon Temp change
    words = "temperature is ";//logs temperature changes 
    words += temp;
    message = words;
}

/*
  Since Humid is READ_WRITE variable, onHumidChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidChange()  {
  // Add your code here to act upon Humid change
   words = "Humidity is ";//logs humidity change
   words += humid;
   message = words;
}

/*
  Since Temp2 is READ_WRITE variable, onTemp2Change() is
  executed every time a new value is received from IoT Cloud.
*/
